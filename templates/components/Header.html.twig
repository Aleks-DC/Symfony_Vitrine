<header id="site-header" class="sticky top-0 z-50 bg-transparent translate-y-0 transition-transform duration-300 ease-out will-change-transform">
    <nav aria-label="Global" class="flex items-center justify-between p-6 lg:px-8">
        <div class="flex lg:flex-1">
            <a href="#" class="-m-1.5 p-1.5">
                <span class="sr-only">{{ brand.name }}</span>
                <img src="{{ brand.logo.src }}" alt="{{ brand.logo.alt }}" class="h-8 w-auto" />
            </a>
        </div>

        <div class="flex lg:hidden">
            <button type="button"
                    command="show-modal"
                    commandfor="{{ mobile.dialog_id }}"
                    class="-m-2.5 inline-flex items-center justify-center rounded-md p-2.5 text-gray-400">
                <span class="sr-only">Open main menu</span>
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" data-slot="icon" aria-hidden="true" class="size-6">
                    <path d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5" stroke-linecap="round" stroke-linejoin="round" />
                </svg>
            </button>
        </div>

        <div class="hidden lg:flex lg:gap-x-12">
            {% for item in menu %}
                <a href="{{ item.href }}" class="text-sm/6 font-semibold text-white inline-flex items-center border-b-2 border-transparent px-1 pt-1 hover:border-gray-300 hover:text-gray-700 dark:text-gray-300 dark:hover:border-white/20 dark:hover:text-white">
                    {{ item.label }}
                </a>
            {% endfor %}
        </div>

        <div class="hidden lg:flex lg:flex-1 lg:justify-end">
            <a href="{{ auth.login_href }}" class="text-sm/6 font-semibold text-white">
                {{ auth.login_label }} <span aria-hidden="true">&rarr;</span>
            </a>
        </div>
    </nav>

    {# Mobile dialog #}
    <el-dialog>
        <dialog id="{{ mobile.dialog_id }}" class="backdrop:bg-transparent lg:hidden">
            <div tabindex="0" class="fixed inset-0 focus:outline-none">
                <el-dialog-panel class="fixed inset-y-0 right-0 z-50 w-full overflow-y-auto bg-gray-900 p-6
                           sm:max-w-sm sm:ring-1 sm:ring-gray-100/10">
                    <div class="flex items-center justify-between">
                        <a href="#" class="-m-1.5 p-1.5">
                            <span class="sr-only">{{ brand.name }}</span>
                            <img src="{{ brand.logo.src }}" alt="{{ brand.logo.alt }}" class="h-8 w-auto" />
                        </a>
                        <button type="button"
                                command="close"
                                commandfor="{{ mobile.dialog_id }}"
                                class="-m-2.5 rounded-md p-2.5 text-gray-400">
                            <span class="sr-only">Close menu</span>
                            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" data-slot="icon" aria-hidden="true" class="size-6">
                                <path d="M6 18 18 6M6 6l12 12" stroke-linecap="round" stroke-linejoin="round" />
                            </svg>
                        </button>
                    </div>

                    <div class="mt-6 flow-root">
                        <div class="-my-6 divide-y divide-gray-500/25">
                            <div class="space-y-2 py-6">
                                {% for item in menu %}
                                    <a href="{{ item.href }}"
                                       command="close"
                                       commandfor="{{ mobile.dialog_id }}"
                                       class="-mx-3 block rounded-lg px-3 py-2 text-base/7 font-semibold text-white hover:bg-white/5">
                                        {{ item.label }}
                                    </a>
                                {% endfor %}
                            </div>
                            <div class="py-6">
                                <a href="{{ auth.login_href }}"
                                   class="-mx-3 block rounded-lg px-3 py-2.5 text-base/7 font-semibold text-white hover:bg-white/5">
                                    {{ auth.login_label }}
                                </a>
                            </div>
                        </div>
                    </div>
                </el-dialog-panel>
            </div>
        </dialog>
    </el-dialog>
</header>

<script>
    (function () {
        // Mesure la hauteur réelle du nav pour alimenter --header-h
        const nav = document.querySelector('header > nav[aria-label="Global"]')
            || document.querySelector('header > nav')
            || document.querySelector('header');

        const setHeaderH = () => {
            const h = nav ? Math.round(nav.getBoundingClientRect().height) : 0;
            document.documentElement.style.setProperty('--header-h', h + 'px');
        };

        setHeaderH();
        window.addEventListener('load', setHeaderH, { passive: true });
        window.addEventListener('resize', setHeaderH, { passive: true });

        // Mobile: fermer le dialog PUIS lancer le scroll natif (une seule anim))
        const dlg = document.getElementById('{{ mobile.dialog_id }}');
        if (!dlg) return;

        dlg.addEventListener('click', function (e) {
            const a = e.target.closest('a[href^="#"]');
            if (!a) return;

            const hash = a.getAttribute('href');
            if (!hash || hash === '#') return;

            e.preventDefault();

            const go = () => {
                if (history.pushState) {
                    history.pushState(null, '', hash);
                    const target = document.querySelector(hash);
                    target?.scrollIntoView({ behavior: 'smooth', block: 'start' });
                } else {
                    location.hash = hash;
                }
            };

            if (typeof dlg.close === 'function') {
                dlg.addEventListener('close', go, { once: true });
                try { dlg.close(); } catch { go(); }
            } else {
                dlg.removeAttribute('open');
                requestAnimationFrame(go);
            }
        }, { passive: false });
    })();
</script>
<script>
    (function () {
        const header = document.getElementById('site-header');
        if (!header) return;

        const nav = header.querySelector('nav[aria-label="Global"]') || header.querySelector('nav') || header;
        const dlg = document.getElementById('{{ mobile.dialog_id }}');

        /* 1) Hauteur réelle du header -> --header-h (utile pour scroll-margin-top & Hero) */
        const setHeaderH = () => {
            const h = nav ? Math.round(nav.getBoundingClientRect().height) : 0;
            document.documentElement.style.setProperty('--header-h', h + 'px');
        };
        setHeaderH();
        addEventListener('load', setHeaderH, { passive: true });
        addEventListener('resize', setHeaderH, { passive: true });

        /* 2) Helpers show/hide */
        const showHeader = () => {
            header.classList.remove('-translate-y-full');
            header.classList.add('translate-y-0');
        };
        const hideHeader = () => {
            header.classList.remove('translate-y-0');
            header.classList.add('-translate-y-full');
        };

        /* 3) Effet “élevé” (fond/blur) dès qu’on a un peu scrollé */
        const setRaised = () => {
            const s = window.scrollY > 4;
            header.classList.toggle('bg-gray-900/80', s);
            header.classList.toggle('supports-[backdrop-filter]:bg-gray-900/60', s);
            header.classList.toggle('backdrop-blur', s);
            header.classList.toggle('border-b', s);
            header.classList.toggle('border-white/10', s);
            header.classList.toggle('shadow-sm', s);
        };

        /* 4) Logique hide-on-down / show-on-up (avec seuils) */
        let lastY = window.scrollY, downAcc = 0, upAcc = 0, ticking = false;
        const DOWN_HIDE = 24;   // px cumulé vers le bas avant de cacher
        const UP_SHOW   = 12;   // px cumulé vers le haut avant d’afficher

        const onScrollRaf = () => {
            const y = window.scrollY;
            const dy = y - lastY;
            lastY = y;

            setRaised();

            if (Math.abs(dy) >= 2) {
                if (dy > 0) { // vers le bas
                    downAcc += dy; upAcc = 0;
                    if (downAcc > DOWN_HIDE && y > 64) hideHeader();
                } else {      // vers le haut
                    upAcc += -dy; downAcc = 0;
                    if (upAcc > UP_SHOW) showHeader();
                }
            }
            ticking = false;
        };

        addEventListener('scroll', () => {
            if (!ticking) { ticking = true; requestAnimationFrame(onScrollRaf); }
        }, { passive: true });

        /* Toujours visible tout en haut */
        if (window.scrollY < 8) showHeader();
        setRaised();

        /* 5) Montrer la navbar quand on clique dans la navbar ou un lien d’ancre (desktop) */
        header.addEventListener('click', () => showHeader(), { passive: true });
        document.addEventListener('click', (e) => {
            const a = e.target.closest('a[href^="#"]');
            if (a) showHeader();
        }, { passive: true });

        /* 6) Mobile: fermer le dialog PUIS scroll (et afficher la navbar) */
        if (dlg) {
            dlg.addEventListener('click', function (e) {
                const a = e.target.closest('a[href^="#"]');
                if (!a) return;

                const hash = a.getAttribute('href');
                if (!hash || hash === '#') return;

                e.preventDefault();
                const go = () => {
                    showHeader();
                    if (history.pushState) {
                        history.pushState(null, '', hash);
                        document.querySelector(hash)?.scrollIntoView({ behavior: 'smooth', block: 'start' });
                    } else {
                        location.hash = hash;
                    }
                };
                if (typeof dlg.close === 'function') {
                    dlg.addEventListener('close', go, { once: true });
                    try { dlg.close(); } catch { go(); }
                } else {
                    dlg.removeAttribute('open'); requestAnimationFrame(go);
                }
            }, { passive: false });
        }

        /* 7) Si la hash change (ex: navigation clavier), on montre la navbar */
        addEventListener('hashchange', showHeader);
    })();
</script>

